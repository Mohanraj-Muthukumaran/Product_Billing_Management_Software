
import com.sun.glass.events.*;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import static java.time.LocalDateTime.now;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mohan
 */
public class productsBilling extends javax.swing.JFrame {
     DefaultTableModel model;
    /**
     * Creates new form productsBilling
     */
    public productsBilling() {
        initComponents();
        pid.requestFocus();
        model = (DefaultTableModel)jTable2.getModel();
        connect();
        initialize();
    }
    
    int net_amount = 0;
    Connection con;
    PreparedStatement pst;
    ResultSet rs;

    public void initialize(){
        net_amount = 0;
        LoadProductNo();
    }
    
    public void connect(){
        try {
            //register the mysql jdbc
            Class.forName("com.mysql.jdbc.Driver");
            try {
                con = DriverManager.getConnection("jdbc:mysql://localhost/product_management_system","root","");
            } catch (SQLException ex) {
                Logger.getLogger(productsCrud.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(productsCrud.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void LoadProductNo(){
        try {
            pst = con.prepareStatement("select id,pname from products");
            rs = pst.executeQuery();
            pid.removeAllItems();
            while(rs.next()){
                pid.addItem(rs.getString(1) +" - "+ rs.getString(2));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(productsCrud.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pid = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        Jlabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtpid = new javax.swing.JLabel();
        txtpprice = new javax.swing.JLabel();
        txtpqty = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        reqqty = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        netamount = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtpname = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setText("PRODUCT MANAGEMENT SYSTEM");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 204, 0));
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 102, 0));
        jLabel2.setText("PRODUCT BILLING SYSTEM");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 51, 51));
        jButton1.setText("CLOSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton2.setForeground(new java.awt.Color(0, 204, 51));
        jButton2.setText("MANAGE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("CHOOSE PRODUCT ID");

        pid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                pidItemStateChanged(evt);
            }
        });
        pid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pidMouseClicked(evt);
            }
        });
        pid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pidActionPerformed(evt);
            }
        });
        pid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pidKeyPressed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 255));
        jLabel9.setText("(CHOOSE THE ITEM AND PRESS ENTER)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel3)
                        .addGap(35, 35, 35)
                        .addComponent(pid, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addContainerGap())
        );

        Jlabel.setText("PRODUCT ID");

        jLabel5.setText("PRODUCT PRICE");

        jLabel6.setText("AVAILABLE QTY");

        txtpid.setText("**CHOOSE THE PRODUCT**");

        txtpprice.setText("**CHOOSE THE PRODUCT**");

        txtpqty.setText("**CHOOSE THE PRODUCT**");

        jLabel10.setText("REQUIRED QTY");

        reqqty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqqtyActionPerformed(evt);
            }
        });
        reqqty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                reqqtyKeyPressed(evt);
            }
        });

        jButton4.setForeground(new java.awt.Color(0, 204, 51));
        jButton4.setText("ADD");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton4KeyPressed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PID", "NAME", "QUANITY", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setAlignmentX(30.0F);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(1);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(2);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(3);
        }

        jButton5.setForeground(new java.awt.Color(255, 51, 0));
        jButton5.setText("REMOVE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jButton5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton5KeyPressed(evt);
            }
        });

        jButton6.setForeground(new java.awt.Color(255, 153, 0));
        jButton6.setText("UPDATE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton6KeyPressed(evt);
            }
        });

        jLabel8.setText("TOTAL PRICE");

        netamount.setText("**ADD ITEMS**");

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jButton8.setForeground(new java.awt.Color(0, 204, 51));
        jButton8.setText("PROCEED WITH BILLING");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jButton8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton8KeyPressed(evt);
            }
        });

        jLabel7.setText("PRODUCT NAME");

        txtpname.setText("**CHOOSE THE PRODUCT**");

        jButton3.setForeground(new java.awt.Color(51, 0, 255));
        jButton3.setText("NEW");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton3KeyPressed(evt);
            }
        });

        jButton7.setForeground(new java.awt.Color(255, 102, 0));
        jButton7.setText("BILLING LOG");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(109, 109, 109)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Jlabel)
                                    .addComponent(jLabel7)))
                            .addGap(58, 58, 58)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtpqty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(reqqty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtpid, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtpname, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtpprice, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jButton2)
                                    .addGap(34, 34, 34)
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1))
                                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(151, 151, 151)
                            .addComponent(jLabel8)
                            .addGap(54, 54, 54)
                            .addComponent(netamount))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(58, 58, 58)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(39, 39, 39)
                            .addComponent(jButton6)
                            .addGap(37, 37, 37)
                            .addComponent(jButton5)
                            .addGap(34, 34, 34)
                            .addComponent(jButton3)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addGap(63, 63, 63)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Jlabel)
                    .addComponent(txtpid))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtpname)
                    .addComponent(jLabel7))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtpprice))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtpqty))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(reqqty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(netamount))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton7))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pidActionPerformed
//        String id = pid.getSelectedItem().toString();
//        LoadProductNo();
//        id = id.substring(0,1);
//        
//        try {
//            pst = con.prepareStatement("select * from products where id = ?");
//            pst.setString(1, id);
//            rs = pst.executeQuery();
//            
//            if(rs.next() == true){
//                txtpid.setText(rs.getString(1));
//                txtpname.setText(rs.getString(2));
//                txtpprice.setText(rs.getString(3));
//                txtpqty.setText(rs.getString(4));
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(productsCrud.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        reqqty.setText("");
    }//GEN-LAST:event_pidActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // add data
        
        String id =  txtpid.getText();
        String pname = txtpname.getText();
        String pprice = txtpprice.getText();
        String qty = txtpqty.getText();
        String req_qty = reqqty.getText();
        int a=-1;
        int temp_qty = 0;
        int temp_price =0;
        
        if(req_qty.equals("") || qty.equals("**CHOOSE THE PRODUCT**") || pprice.equals("**CHOOSE THE PRODUCT**") || pname.equals("**CHOOSE THE PRODUCT**") || id.equals("**CHOOSE THE PRODUCT**")){
              JOptionPane.showMessageDialog(this, "Choose an item and required quantity to proceed!");
              pid.requestFocus();
        }
        
        else{
            int p_avail_qty =Integer.parseInt(qty);
            int p_req_qty = Integer.parseInt(req_qty);
            
            if(model.getRowCount() > 0){
                for(int i = 0; i<model.getRowCount() ; i++){
                    if(Integer.parseInt(id) == Integer.parseInt(model.getValueAt(i, 0).toString())){
                        a = i;
                        temp_qty = Integer.parseInt(model.getValueAt(i, 2).toString());
                        temp_price = Integer.parseInt(model.getValueAt(i, 3).toString());
                        int req = Integer.parseInt(req_qty);
                        int fqty = req + temp_qty;
                        if(fqty <= Integer.parseInt(qty) ){
                            net_amount = net_amount - temp_price;
                            int temp =  fqty * Integer.parseInt(pprice);
                            net_amount = net_amount + temp;
                            model.setValueAt( fqty , i, 2);
                            model.setValueAt(temp, i, 3);
                            netamount.setText(Integer.toString(net_amount));
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Only "+qty+" "+ pname +" is available! Out of stock!");
                            pid.requestFocus();
                        }
                    }
               }
                    txtpid.setText("**CHOOSE THE PRODUCT**");
                    txtpname.setText("**CHOOSE THE PRODUCT**");
                    txtpprice.setText("**CHOOSE THE PRODUCT**");
                    txtpqty.setText("**CHOOSE THE PRODUCT**");
                    reqqty.setText("");
                    pid.requestFocus();
            }
            
            if(a==-1){
                if( p_req_qty > p_avail_qty ){
                    JOptionPane.showMessageDialog(this, "Only "+qty+" "+ pname +" is available! Out of stock!");
                    pid.requestFocus();
                }
                else{
                    int total_price = p_req_qty * Integer.parseInt(pprice);
                    net_amount = net_amount + total_price;

                    String net = Integer.toString(net_amount);
                    String total = Integer.toString(total_price);
                    String data[] = {id,pname,req_qty,total};

            // data added
                    model.addRow(data);

                    txtpid.setText("**CHOOSE THE PRODUCT**");
                    txtpname.setText("**CHOOSE THE PRODUCT**");
                    txtpprice.setText("**CHOOSE THE PRODUCT**");
                    txtpqty.setText("**CHOOSE THE PRODUCT**");
                    reqqty.setText("");

                    netamount.setText(net);
                    pid.requestFocus();
                }
            }
        }
        LoadProductNo();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
        new productsCrud().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void reqqtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqqtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reqqtyActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) jTable2.getModel();
        
        String pid = tblModel.getValueAt(jTable2.getSelectedRow(), 0).toString();
        String pname = tblModel.getValueAt(jTable2.getSelectedRow(), 1).toString();
        String pqty = tblModel.getValueAt(jTable2.getSelectedRow(), 2).toString();
        
         try {
             pst = con.prepareStatement("select pprice,pqty from products where id = ?");
             pst.setString(1, pid);
             rs = pst.executeQuery();
             if(rs.next() == true){
                txtpprice.setText(rs.getString(1));
                txtpqty.setText(rs.getString(2));
             }
         } catch (SQLException ex) {
             Logger.getLogger(productsBilling.class.getName()).log(Level.SEVERE, null, ex);
         }
        txtpid.setText(pid);
        txtpname.setText(pname);
        reqqty.setText(pqty);
        reqqty.requestFocus();
         
        LoadProductNo();    
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       DefaultTableModel tblmodel = (DefaultTableModel) jTable2.getModel();
       tblmodel.setRowCount(0);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
       netamount.setText("**ADD ITEMS**");
       net_amount = 0;
       pid.requestFocus();
       LoadProductNo();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        if(jTable2.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Select an Item to Update!");
        }
        else{
            String updated_qty = reqqty.getText();
            String pprice = txtpprice.getText();
            String tprice = model.getValueAt(jTable2.getSelectedRow(), 3).toString();
            
            int fqty = Integer.parseInt(updated_qty);
            int fpprice = Integer.parseInt(pprice);
            int ftprice = Integer.parseInt(tprice);
            net_amount = net_amount - ftprice;
            int price = fqty*fpprice;
            net_amount = net_amount + price;
            
            model.setValueAt( updated_qty , jTable2.getSelectedRow(), 2);
            model.setValueAt(price,  jTable2.getSelectedRow(), 3);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
                netamount.setText(Integer.toString(net_amount));
        }
        pid.requestFocus();
        LoadProductNo();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // remove selected row
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        if(jTable2.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Select an Item to Remove!");
        }
        else{
        String pprice = model.getValueAt(jTable2.getSelectedRow(), 3).toString();
        
        int price = Integer.parseInt(pprice);
        net_amount = net_amount - price;
        String total = Integer.toString(net_amount);
        netamount.setText(total);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
        model.removeRow(jTable2.getSelectedRow());
        }
        pid.requestFocus();
        LoadProductNo();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void pidMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pidMouseClicked
//        LoadProductNo();
//        String id = pid.getSelectedItem().toString();
//        LoadProductNo();
//        id = id.substring(0,1);
//        
//        try {
//            pst = con.prepareStatement("select * from products where id = ?");
//            pst.setString(1, id);
//            rs = pst.executeQuery();
//            
//            if(rs.next() == true){
//                txtpid.setText(rs.getString(1));
//                txtpname.setText(rs.getString(2));
//                txtpprice.setText(rs.getString(3));
//                txtpqty.setText(rs.getString(4));
//                LoadProductNo();
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(productsCrud.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        reqqty.setText("");
        
    }//GEN-LAST:event_pidMouseClicked

    private void pidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pidItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_pidItemStateChanged

    private void pidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pidKeyPressed
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        String id = pid.getSelectedItem().toString();
        LoadProductNo();
        String arr[] = id.split(" ");
        id = arr[0];
        System.out.println();
        try {
            pst = con.prepareStatement("select * from products where id = ?");
            pst.setString(1, id);
            rs = pst.executeQuery();
            
            if(rs.next() == true){
                txtpid.setText(rs.getString(1));
                txtpname.setText(rs.getString(2));
                txtpprice.setText(rs.getString(3));
                txtpqty.setText(rs.getString(4));
            }
        } catch (SQLException ex) {
            Logger.getLogger(productsCrud.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        reqqty.requestFocus();
        LoadProductNo();
        }
        
    }//GEN-LAST:event_pidKeyPressed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            dispose();
            new productsCrud().setVisible(true);
        }
    }//GEN-LAST:event_jButton2KeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            System.exit(0);
        }
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String id =  txtpid.getText();
        String pname = txtpname.getText();
        String pprice = txtpprice.getText();
        String qty = txtpqty.getText();
        String req_qty = reqqty.getText();
        int a=-1;
        int temp_qty = 0;
        int temp_price =0;
        
        if(req_qty.equals("") || qty.equals("**CHOOSE THE PRODUCT**") || pprice.equals("**CHOOSE THE PRODUCT**") || pname.equals("**CHOOSE THE PRODUCT**") || id.equals("**CHOOSE THE PRODUCT**")){
              JOptionPane.showMessageDialog(this, "Choose an item and required quantity to proceed!");
              pid.requestFocus();
        }
        
        else{
            int p_avail_qty =Integer.parseInt(qty);
            int p_req_qty = Integer.parseInt(req_qty);
            
            if(model.getRowCount() > 0){
                for(int i = 0; i<model.getRowCount() ; i++){
                    if(Integer.parseInt(id) == Integer.parseInt(model.getValueAt(i, 0).toString())){
                        a = i;
                        temp_qty = Integer.parseInt(model.getValueAt(i, 2).toString());
                        temp_price = Integer.parseInt(model.getValueAt(i, 3).toString());
                        int req = Integer.parseInt(req_qty);
                        int fqty = req + temp_qty;
                        if(fqty <= Integer.parseInt(qty) ){
                            net_amount = net_amount - temp_price;
                            int temp =  fqty * Integer.parseInt(pprice);
                            net_amount = net_amount + temp;
                            model.setValueAt( fqty , i, 2);
                            model.setValueAt(temp, i, 3);
                            netamount.setText(Integer.toString(net_amount));
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Only "+qty+" "+ pname +" is available! Out of stock!");
                            pid.requestFocus();
                        }
                    }
               }
                    txtpid.setText("**CHOOSE THE PRODUCT**");
                    txtpname.setText("**CHOOSE THE PRODUCT**");
                    txtpprice.setText("**CHOOSE THE PRODUCT**");
                    txtpqty.setText("**CHOOSE THE PRODUCT**");
                    reqqty.setText("");
                    pid.requestFocus();
            }
            
            if(a==-1){
                if( p_req_qty > p_avail_qty ){
                    JOptionPane.showMessageDialog(this, "Only "+qty+" "+ pname +" is available! Out of stock!");
                    pid.requestFocus();
                }
                else{
                    int total_price = p_req_qty * Integer.parseInt(pprice);
                    net_amount = net_amount + total_price;

                    String net = Integer.toString(net_amount);
                    String total = Integer.toString(total_price);
                    String data[] = {id,pname,req_qty,total};

            // data added
                    model.addRow(data);

                    txtpid.setText("**CHOOSE THE PRODUCT**");
                    txtpname.setText("**CHOOSE THE PRODUCT**");
                    txtpprice.setText("**CHOOSE THE PRODUCT**");
                    txtpqty.setText("**CHOOSE THE PRODUCT**");
                    reqqty.setText("");

                    netamount.setText(net);
                    pid.requestFocus();
                }
            }
        }
        LoadProductNo();
        }
    }//GEN-LAST:event_jButton4KeyPressed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER ){
            DefaultTableModel tblmodel = (DefaultTableModel) jTable2.getModel();
            tblmodel.setRowCount(0);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
            netamount.setText("**ADD ITEMS**");
            net_amount =0;
            pid.requestFocus();
            LoadProductNo();
        }
    }//GEN-LAST:event_jButton3KeyPressed

    private void jButton5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton5KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        if(jTable2.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Select an Item to Remove!");
        }
        else{
        String pprice = model.getValueAt(jTable2.getSelectedRow(), 3).toString();
        
        int price = Integer.parseInt(pprice);
        net_amount = net_amount - price;
        String total = Integer.toString(net_amount);
        netamount.setText(total);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
        model.removeRow(jTable2.getSelectedRow());
        }
        pid.requestFocus();
        LoadProductNo();
        }
    }//GEN-LAST:event_jButton5KeyPressed

    private void reqqtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_reqqtyKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String id =  txtpid.getText();
        String pname = txtpname.getText();
        String pprice = txtpprice.getText();
        String qty = txtpqty.getText();
        String req_qty = reqqty.getText();
        int a=-1;
        int temp_qty = 0;
        int temp_price =0;
        
        if(req_qty.equals("") || qty.equals("**CHOOSE THE PRODUCT**") || pprice.equals("**CHOOSE THE PRODUCT**") || pname.equals("**CHOOSE THE PRODUCT**") || id.equals("**CHOOSE THE PRODUCT**")){
              JOptionPane.showMessageDialog(this, "Choose an item and required quantity to proceed!");
              pid.requestFocus();
        }
        
        else{
            int p_avail_qty =Integer.parseInt(qty);
            int p_req_qty = Integer.parseInt(req_qty);
            
            if(model.getRowCount() > 0){
                for(int i = 0; i<model.getRowCount() ; i++){
                    if(Integer.parseInt(id) == Integer.parseInt(model.getValueAt(i, 0).toString())){
                        a = i;
                        temp_qty = Integer.parseInt(model.getValueAt(i, 2).toString());
                        temp_price = Integer.parseInt(model.getValueAt(i, 3).toString());
                        int req = Integer.parseInt(req_qty);
                        int fqty = req + temp_qty;
                        if(fqty <= Integer.parseInt(qty) ){
                            net_amount = net_amount - temp_price;
                            int temp =  fqty * Integer.parseInt(pprice);
                            net_amount = net_amount + temp;
                            model.setValueAt( fqty , i, 2);
                            model.setValueAt(temp, i, 3);
                            netamount.setText(Integer.toString(net_amount));
                        }
                        else{
                            JOptionPane.showMessageDialog(this, "Only "+qty+" "+ pname +" is available! Out of stock!");
                            pid.requestFocus();
                        }
                    }
               }
                    txtpid.setText("**CHOOSE THE PRODUCT**");
                    txtpname.setText("**CHOOSE THE PRODUCT**");
                    txtpprice.setText("**CHOOSE THE PRODUCT**");
                    txtpqty.setText("**CHOOSE THE PRODUCT**");
                    reqqty.setText("");
                    pid.requestFocus();
            }
            
            if(a==-1){
                if( p_req_qty > p_avail_qty ){
                    JOptionPane.showMessageDialog(this, "Only "+qty+" "+ pname +" is available! Out of stock!");
                    pid.requestFocus();
                }
                else{
                    int total_price = p_req_qty * Integer.parseInt(pprice);
                    net_amount = net_amount + total_price;

                    String net = Integer.toString(net_amount);
                    String total = Integer.toString(total_price);
                    String data[] = {id,pname,req_qty,total};

            // data added
                    model.addRow(data);

                    txtpid.setText("**CHOOSE THE PRODUCT**");
                    txtpname.setText("**CHOOSE THE PRODUCT**");
                    txtpprice.setText("**CHOOSE THE PRODUCT**");
                    txtpqty.setText("**CHOOSE THE PRODUCT**");
                    reqqty.setText("");

                    netamount.setText(net);
                    pid.requestFocus();
                }
            }
        }
        LoadProductNo();
        }
    }//GEN-LAST:event_reqqtyKeyPressed

    private void jButton6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton6KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        if(jTable2.getSelectionModel().isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Select an Item to Update!");
        }
        else{
            String updated_qty = reqqty.getText();
            String pprice = txtpprice.getText();
            String tprice = model.getValueAt(jTable2.getSelectedRow(), 3).toString();
            
            int fqty = Integer.parseInt(updated_qty);
            int fpprice = Integer.parseInt(pprice);
            int ftprice = Integer.parseInt(tprice);
            net_amount = net_amount - ftprice;
            int price = fqty*fpprice;
            net_amount = net_amount + price;
            
            model.setValueAt( updated_qty , jTable2.getSelectedRow(), 2);
            model.setValueAt(price,  jTable2.getSelectedRow(), 3);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
                netamount.setText(Integer.toString(net_amount));
        }
        pid.requestFocus();
        LoadProductNo();
        }
    }//GEN-LAST:event_jButton6KeyPressed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int n = model.getRowCount();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("mmdd");
        Random ran = new Random();
        String a = "BI" + Integer.toString(ran.nextInt(1000000)) + dtf.format(now());
        String total_price = netamount.getText();
        for(int i=0;i<n;i++){
            String bid = a;
            String pid =  model.getValueAt(i, 0).toString();
            String pname = model.getValueAt(i, 1).toString();
            String pqty = model.getValueAt(i, 2).toString();
            String pprice = model.getValueAt(i, 3).toString();
            try {
                pst = con.prepareStatement("insert into billingdata(bid,pid,pname,pqty,pprice,tprice) values (?,?,?,?,?,?)");
                pst.setString(1, bid);
                pst.setString(2, pid);
                pst.setString(3, pname);
                pst.setString(4, pqty);
                pst.setString(5, pprice);
                pst.setString(6, total_price);
            } catch (SQLException ex) {
                Logger.getLogger(productsBilling.class.getName()).log(Level.SEVERE, null, ex);
            }
            int k =0;
            try {
                k = pst.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(productsBilling.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(k==0){
                JOptionPane.showMessageDialog(this, "Billing failed while adding "+ i+1+" item!");
            }

        }
        model.setRowCount(0);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
       netamount.setText("**ADD ITEMS**");
       net_amount = 0;
       pid.requestFocus();
       LoadProductNo();
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton8KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            int n = model.getRowCount();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("mmdd");
        Random ran = new Random();
        String a = "BI" + Integer.toString(ran.nextInt(1000000)) + dtf.format(now());
        String total_price = netamount.getText();
        for(int i=0;i<n;i++){
            String bid = a;
            String pid =  model.getValueAt(i, 0).toString();
            String pname = model.getValueAt(i, 1).toString();
            String pqty = model.getValueAt(i, 2).toString();
            String pprice = model.getValueAt(i, 3).toString();
            try {
                pst = con.prepareStatement("insert into billingdata(bid,pid,pname,pqty,pprice,tprice) values (?,?,?,?,?,?)");
                pst.setString(1, bid);
                pst.setString(2, pid);
                pst.setString(3, pname);
                pst.setString(4, pqty);
                pst.setString(5, pprice);
                pst.setString(6, total_price);
            } catch (SQLException ex) {
                Logger.getLogger(productsBilling.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        model.setRowCount(0);
                txtpid.setText("**CHOOSE THE PRODUCT**");
                txtpname.setText("**CHOOSE THE PRODUCT**");
                txtpprice.setText("**CHOOSE THE PRODUCT**");
                txtpqty.setText("**CHOOSE THE PRODUCT**");
                reqqty.setText("");
       netamount.setText("**ADD ITEMS**");
       net_amount = 0;
       pid.requestFocus();
       LoadProductNo();
        }
    }//GEN-LAST:event_jButton8KeyPressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        new billingLog().setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(productsBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(productsBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(productsBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(productsBilling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new productsBilling().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jlabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel netamount;
    private javax.swing.JComboBox<String> pid;
    private javax.swing.JTextField reqqty;
    private javax.swing.JLabel txtpid;
    private javax.swing.JLabel txtpname;
    private javax.swing.JLabel txtpprice;
    private javax.swing.JLabel txtpqty;
    // End of variables declaration//GEN-END:variables
}
